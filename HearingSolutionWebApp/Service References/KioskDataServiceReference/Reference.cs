//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HearingSolutionWebApp.KioskDataServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KioskDataServiceReference.IKioskDataService")]
    public interface IKioskDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKioskDataService/SendTransaction", ReplyAction="http://tempuri.org/IKioskDataService/SendTransactionResponse")]
        bool SendTransaction(KioskMessageTypes.TransactionMessageWrap transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKioskDataService/SendTransaction", ReplyAction="http://tempuri.org/IKioskDataService/SendTransactionResponse")]
        System.Threading.Tasks.Task<bool> SendTransactionAsync(KioskMessageTypes.TransactionMessageWrap transaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKioskDataService/SendHeartbeatMessage", ReplyAction="http://tempuri.org/IKioskDataService/SendHeartbeatMessageResponse")]
        bool SendHeartbeatMessage(KioskMessageTypes.HeartbeatMessageWrap heartbeat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKioskDataService/SendHeartbeatMessage", ReplyAction="http://tempuri.org/IKioskDataService/SendHeartbeatMessageResponse")]
        System.Threading.Tasks.Task<bool> SendHeartbeatMessageAsync(KioskMessageTypes.HeartbeatMessageWrap heartbeat);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKioskDataServiceChannel : HearingSolutionWebApp.KioskDataServiceReference.IKioskDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KioskDataServiceClient : System.ServiceModel.ClientBase<HearingSolutionWebApp.KioskDataServiceReference.IKioskDataService>, HearingSolutionWebApp.KioskDataServiceReference.IKioskDataService {
        
        public KioskDataServiceClient() {
        }
        
        public KioskDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KioskDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KioskDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KioskDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SendTransaction(KioskMessageTypes.TransactionMessageWrap transaction) {
            return base.Channel.SendTransaction(transaction);
        }
        
        public System.Threading.Tasks.Task<bool> SendTransactionAsync(KioskMessageTypes.TransactionMessageWrap transaction) {
            return base.Channel.SendTransactionAsync(transaction);
        }
        
        public bool SendHeartbeatMessage(KioskMessageTypes.HeartbeatMessageWrap heartbeat) {
            return base.Channel.SendHeartbeatMessage(heartbeat);
        }
        
        public System.Threading.Tasks.Task<bool> SendHeartbeatMessageAsync(KioskMessageTypes.HeartbeatMessageWrap heartbeat) {
            return base.Channel.SendHeartbeatMessageAsync(heartbeat);
        }
    }
}
